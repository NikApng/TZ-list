// ../main-js/stogare.js
// –•—Ä–∞–Ω–∏–ª–∏—â–µ + —Ä–µ–Ω–¥–µ—Ä –∑–∞–¥–∞—á —Å —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage

const STORAGE_KEY = 'listUL';

// ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
const uid = () => `${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç –ú–ê–°–°–ò–í
function safeParseArray(str) {
  if (!str) return [];
  try {
    const parsed = JSON.parse(str);
    return Array.isArray(parsed) ? parsed : [];
  } catch {
    return [];
  }
}

function loadTasks() {
  // –ª–µ—á–∏–º —Å—Ç–∞—Ä—ã–µ –∫—Ä–∏–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–æ–¥–µ {}
  const raw = localStorage.getItem(STORAGE_KEY);
  let tasks = safeParseArray(raw);

  // –º–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ä–∞–Ω—å—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
  if (tasks.length && typeof tasks[0] === 'string') {
    tasks = tasks.map(t => ({ id: uid(), text: t, done: false }));
    localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
  }

  return tasks;
}

function saveTasks(tasks) {
  localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
}

// ---------- DOM —Å—Å—ã–ª–∫–∏ ----------
const input = document.querySelector('[data-name-input]');
const listUL = document.querySelector('[data-ul-list]');

// ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
let tasks = loadTasks(); // –º–∞—Å—Å–∏–≤ [{id, text, done}]

// ---------- —Ä–µ–Ω–¥–µ—Ä ----------
function render() {
  listUL.innerHTML = '';

  // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –Ω–µ-–º–∞—Å—Å–∏–≤–∞
  if (!Array.isArray(tasks)) {
    tasks = [];
    saveTasks(tasks);
  }

  tasks.forEach(({ id, text, done }) => {
    const li = document.createElement('li');
    li.dataset.id = id;
    li.className = 'task-item';

    // —á–µ–∫–±–æ–∫—Å "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    const check = document.createElement('input');
    check.type = 'checkbox';
    check.className = 'task-check';
    check.checked = !!done;
    check.dataset.action = 'toggle';

    const span = document.createElement('span');
    span.textContent = text;
    span.className = 'task-text';
    if (done) span.style.textDecoration = 'line-through';

    const editBtn = document.createElement('button');
    editBtn.type = 'button';
    editBtn.textContent = '‚úèÔ∏è';
    editBtn.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    editBtn.dataset.action = 'edit';

    const delBtn = document.createElement('button');
    delBtn.type = 'button';
    delBtn.textContent = 'üóëÔ∏è';
    delBtn.title = '–£–¥–∞–ª–∏—Ç—å';
    delBtn.dataset.action = 'delete';

    li.appendChild(check);
    li.appendChild(span);
    li.appendChild(editBtn);
    li.appendChild(delBtn);
    listUL.appendChild(li);
  });
}

// ---------- –æ–ø–µ—Ä–∞—Ü–∏–∏ ----------
function addTask(value) {
  const text = value.trim();
  if (!text) return;

  // –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–Ω–æ–≤–∞ —É–±—å—ë—Ç —Ñ–æ—Ä–º–∞—Ç –≤ localStorage
  if (!Array.isArray(tasks)) tasks = [];

  tasks.push({ id: uid(), text, done: false });
  saveTasks(tasks);
  input.value = '';
  input.focus();
  render();
}

function deleteTask(id) {
  tasks = tasks.filter(t => t.id !== id);
  saveTasks(tasks);
  render();
}

function toggleTask(id) {
  const t = tasks.find(x => x.id === id);
  if (!t) return;
  t.done = !t.done;
  saveTasks(tasks);
  render();
}

function startEditTask(id, li) {
  const task = tasks.find(t => t.id === id);
  if (!task) return;

  const currentSpan = li.querySelector('.task-text');
  const inputEdit = document.createElement('input');
  inputEdit.type = 'text';
  inputEdit.value = task.text;
  inputEdit.className = 'task-edit-input';
  inputEdit.setAttribute('aria-label', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É');

  li.replaceChild(inputEdit, currentSpan);
  inputEdit.focus();
  inputEdit.select();

  const commit = () => {
    const newText = inputEdit.value.trim();
    if (newText) {
      task.text = newText;
      saveTasks(tasks);
    }
    render();
  };

  inputEdit.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') commit();
    if (e.key === 'Escape') render();
  });
  inputEdit.addEventListener('blur', commit);
}

// ---------- —Å–æ–±—ã—Ç–∏—è ----------
document.addEventListener('click', (e) => {
  // –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  if (e.target.closest('[data-create-btn]')) {
    addTask(input.value);
    return;
  }

  // –¥–µ–π—Å—Ç–≤–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞
  const li = e.target.closest('li');
  const id = li?.dataset.id;

  // —á–µ–∫–±–æ–∫—Å
  if (e.target.matches('input.task-check[data-action="toggle"]')) {
    toggleTask(id);
    return;
  }

  // –∫–Ω–æ–ø–∫–∏
  const btn = e.target.closest('button[data-action]');
  if (btn) {
    const action = btn.dataset.action;
    if (action === 'delete') deleteTask(id);
    if (action === 'edit') startEditTask(id, li);
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ Enter –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
input?.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') addTask(input.value);
});

// ---------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
// –µ—Å–ª–∏ –≤ localStorage –ª–µ–∂–∏—Ç {}, —Ç–æ –∑–¥–µ—Å—å –º—ã –µ–≥–æ ¬´–≤—ã–ª–µ—á–∏–º¬ª
if (!Array.isArray(tasks)) {
  tasks = [];
  saveTasks(tasks);
}
render();
